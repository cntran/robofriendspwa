{"version":3,"sources":["components/CounterButton.js","components/Header.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","constants.js","containers/App.js","actions.js","registerServiceWorker.js","reducers.js","index.js"],"names":["CounterButton","updateCount","setState","state","count","nextProps","nextState","this","color","props","onClick","Component","Header","className","Card","name","email","id","alt","src","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflow","border","height","children","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","error","dispatch","event","text","target","value","payload","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","initialStateSearch","initialStateRobots","rootReducer","createLogger","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.9a462e32.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass CounterButton extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      count: 0\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.count !== nextState.count) {\n      return true;\n    }\n    return false;\n  }\n\n  updateCount = () => {\n    this.setState(state => {\n      return { count: state.count + 1 }\n    });\n      \n  }\n\n  render() {\n    return (\n      <button color={this.props.color} onClick={this.updateCount}>\n        Count: {this.state.count}\n      </button>\n    );\n  }\n}\n\nexport default CounterButton;","import React, { Component } from 'react';\nimport CounterButton from './CounterButton';\n\nclass Header extends Component {\n\n  shouldComponentUpdate(nextProps, nextState) {\n    return false;\n  }\n\n  render() {\n    return (\n      <div>\n        <h1 className=\"f1\">RoboFriends</h1>\n        <CounterButton color={\"red\"}></CounterButton>\n      </div>\n    )\n  }\n}\n\nexport default Header;","import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card\n              key={i}\n              id={robots[i].id}\n              name={robots[i].name}\n              email={robots[i].email}\n              />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Header from '../components/Header';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\n\nimport { requestRobots, setSearchField } from '../actions';\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nclass App extends Component {\n  \n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  \n  render() {\n    \n    const { searchField, onSearchChange, robots, isPending } = this.props;\n    \n    const filteredRobots = robots.filter((robot) => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n  \n    if (isPending) {\n      return <h1>Loading</h1>\n    } else {\n      return (\n        <div className='tc'>\n          <Header />\n          <SearchBox searchfield={searchField} searchChange={onSearchChange} />\n          <Scroll>\n            <CardList robots={filteredRobots}  />\n          </Scroll>\n        </div>\n      )\n    }    \n  }    \n  \n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App); // high order function (function that returns another function)","import { \n  CHANGE_SEARCH_FIELD, \n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './constants.js'\n\nexport const setSearchField = (text) => {\n  return {\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n  }\n}\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response=> response.json())\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }));\n}","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { \n  CHANGE_SEARCH_FIELD, \n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from './constants.js'\n\nconst initialStateSearch = {\n  searchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n  switch(action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, { searchField: action.payload });\n      // return { ...state, searchField: action.payload }\n    default: \n      return state;\n  }\n}\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n  switch(action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, { robots: action.payload, isPending: false });\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, { error: action.payload, isPending: false });\n    default:\n      return state;\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { searchRobots, requestRobots } from './reducers';\nimport 'tachyons'; \n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({searchRobots, requestRobots});\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(<Provider store={store}>\n                  <App />\n                </Provider>, document.getElementById('root'));\nregisterServiceWorker();"],"sourceRoot":""}